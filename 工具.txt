# Linux
软件包管理工具：yum
写代码相关工具：编辑器Vim/编译器/调试器/编译器gcc/g++/调试器gdb


1.软件包管理工具: yum

1.1 查看安装包： yum list 、yum installed（已安装的包）

通过 yum list 命令罗列出当前一共有哪些软件包，使用 grep 命令只筛选出需要的包。

yum list | grep lrzsz
管道符：连接两个命令，符前边的命令的输出结果当作符后边命令的输入

1.2 安装软件 （root用户下安装）

yum install gcc gcc-c++
yum install gdb
yum install git

1.3 移除安装包

yum remove package_name

【服务器与主机之间的文件传输】Xshell中使用，vm中不能使用
	* rz：将主机文件导入到服务器
	* sz：将服务器文件导出到主机

      
2.编辑器: Vim

2.1 模式：12种模式，常用的有3种（插入模式、普通模式、底行模式）
      所有模式都是围绕普通模式切换的；vim打开一个文件默认就处于普通模式
      模式切换：
        由普通模式切换到插入模式：a（光标下一位）/A（尾）/i（光标位）/I（头）
        由插入模式切换到普通模式：ESC
        由普通模式切换到底行模式：：（先按w保存、再q退出 / wq）
        由底行模式切换到普通模式：ESC
      
2.2 普通模式下常见指令
      移动光标：h j k l（左、下、上、右） , ctrl + f / b(上下翻页)，gg / G（跳到文档开头/结尾），b / w (按单词  左/右走)

      增删查改：yy / nyy（复制/ n行复制），p（粘贴，光标下粘贴），dd / ndd（光标往下处删除/ n行删除）,x（每按一次，删除光标所在位置的一个字符）, dw
       
      其他操作：u（回上一个操作）, ctrl+r（撤销的回复），gg=G(全文对齐)

3.编译器：gcc/g++
	* 将用户所写的高级语言代码解释成为机器可识别的指令


4.调试器：gdb
	* gdb调试程序的前提：使用gcc生成debug版可执行程序（gcc默认生成release版程序）


【gdb调试通过命令完成程序的调试过程】
	* 逐步调试

	* 断点调试

	* 其他调试
  
 5. 项目构建工具：make/Makefile

	* Makefile：是一个普通的文本文件，这个文件记录的是一个项目的所有构建规则
	* make：是一个解释程序，在执行make命令的时候，会到当前目录下寻找Makefile文件，对Makefile中记录的构建规则经行逐行解释执行，最终完成整个项目的构建

【Makefile编写规则】
 
【make的解释执行规则】

	* 伪对象：不管目标对象是否最新，每次都需要重新生成
	* 声明伪对象：.PHONY:target_name


项目版本管理工具：git -> 需要在root模式下配置

	* 从服务器上克隆一个项目：git clone https...
	* 本地的版本提交：git add ./* git commit -m "本次提交的备注信息"
	* 远程服务器的提交：git push origin master
